class Solution {

    // Recursive method
    
    int count = 0;
    public int findTargetSumWays(int[] nums, int S) {
        calculate(nums, 0, 0, S);
        return count;
    }
    public void calculate(int[] nums, int i, int sum, int S){
        if(i == nums.length){
            if(sum == S) count++;
        }
        else{
            calculate(nums, i + 1, sum + nums[i], S);
            calculate(nums, i + 1, sum - nums[i], S);
        }
    }
    
    //DP
    
    public int findTargetSumWays(int[] nums, int S) {
        int sum = 0;
        for(int num : nums) sum += num;
        int target = ( sum + S ) / 2;
        if(S > sum || (sum + S) % 2 == 1) return 0;
        int[] dp = new int[target + 1];
        dp[0] = 1;
        for(int num : nums){
            for(int i = target; i >= num; i--){         //decresing order
                dp[i] += dp[i - num];
            }
        }
       
        return dp[target];
    }
}
