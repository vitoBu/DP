class Solution {      // total Time O(n^3)
    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> words = new HashSet<>(wordDict);      // save time complexity
        int len = s.length();
        boolean[] dp = new boolean[len + 1];
        dp[0] = true;
        for(int i = 1; i <= len; i++) {
            dp[i] = words.contains(s.substring(0, i)) ? true : false;     // O(n)
            for(int j = 1; j < i; j++) {
                if(words.contains(s.substring(j, i))) {     //if dict contains j->i, only need to consider whether 0->j is true
                    dp[i] = dp[i] || dp[j];
                }
            }
        }
        return dp[len];
    }
        
}
