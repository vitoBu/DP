
class Solution {
    
    public int coinChange1(int[] coins, int amount) {
        if(coins == null || coins.length == 0) return -1;
        int[][] dp = new int[coins.length][amount + 1];
        int big = Integer.MAX_VALUE - 1;
        for(int i = 0; i < dp[0].length; i++){
            dp[0][i] = i % coins[0] == 0 ? i / coins[0] : big; 
        }
        for(int i = 1; i < coins.length; i++){
            for(int j = 1; j < amount + 1; j++){
                if(j < coins[i]) dp[i][j] = dp[i - 1][j];
                else{
                    dp[i][j] = Math.min(dp[i - 1][j], 1 + dp[i][j - coins[i]]);
                }
            }
        }
        return dp[coins.length - 1][amount] == big ? -1 : dp[coins.length - 1][amount];
    }
   
   
    public int coinChange2(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, Integer.MAX_VALUE - 1);
        dp[0] = 0;
        for(int coin : coins){
            for(int i = coin; i <= amount; i++){
                dp[i] = Math.min(1 + dp[i - coin], dp[i]); 
            }
        }
        return dp[amount] == Integer.MAX_VALUE - 1 ? -1 : dp[amount];
    }
}
